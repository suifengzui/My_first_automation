from tkinter import *
import matplotlib.pyplot as plt

def plot_MCS7_platness(log, match_log_path):
    with open(log, mode = 'r', encoding ='utf-8') as source_f: #打开log
        source_data = source_f.readlines()
    with open(match_log_path, mode = 'r', encoding ='utf-8') as match_f: #打开需要匹配的文件（定位文件）
        match_data = match_f.readlines()

    number = [] #新建空列表，保存定位文件中每个定位语句的index。
    for each in match_data: #遍历定位文件中的每条语句
        #print(each)# 这里遗留一个问题：定位文件中需要在最后加入一行不需要定位的语句，否则定位文件会缺少一个。
        if each in source_data: #定位语句在log中匹配，一旦匹配到，将其index赋值给number列表。
            number.append(source_data.index(each))
    #print(number)
    add = 63   #需要查找的数据与定位数据之间index的差值
    width = len(number)
    for i in range(width): #定位到查找数据的index。
        number[i] += 63
    #print(number)
   
    need_data_y_2G_TX1 = list()
    for x in range(13): #打印需要查找的数据
        need_data_y_2G_TX1.append(source_data[number[x]].strip())
        #print(source_data[number[x]])
   
    need_data_y_5G_TX1 = list()    
    for i in range(13,37):
        need_data_y_5G_TX1.append(source_data[number[i]].strip())
        #print(source_data[number[i]])
    print(need_data_y_5G_TX1)
        
    
    #print(need_data_y_2G_TX1)  #检查所得到的数是否是在不同frequency下得到的outpower，将其显示出来。
    str_change_int_2G_TX1 = list(map(float,need_data_y_2G_TX1 ))
    #print(str_change_int_2G_TX1)#显示将need_data_y_2G_TX1中的数据由字符改为float是否正确，将其显示。
    str_change_int_5G_TX1 = list(map(float, need_data_y_5G_TX1))
    #print(str_change_int_5G_TX1)
    
    return(str_change_int_2G_TX1, str_change_int_5G_TX1 )
    
def plot_function(data_2G_TX1, data_5G_TX1, picture_title1, picture_title2):
    need_data_x_2G = [2412, 2417, 2422, 2427, 2432, 2437, 2442, 2447, 2452, 2457, 2462, 2467, 2472]
    need_data_x_5G = [5180, 5200, 5220, 5240,5260,5280,5300,5320,5500,5520,5540,5560,5580,5600,5620,5640,5660,5680,5700,5745,5765,5785,5805,5825]
   
    plt.figure(num = 0)
    plt.plot(need_data_x_2G,data_2G_TX1)
    #plt.ylim(10,20)
    #plt.xlim(2400, 2480)
    plt.title(picture_title1, fontsize=12, color='red')
    plt.xlabel('Frequency(Hz)')
    plt.ylabel('Power(dBm)')
    plt.xticks(need_data_x_2G)
    plt.yticks([12,13,14,15,16,17,18])
    plt.axhline(14, c = 'red', linestyle = '--')
    plt.axhline(16, c = 'red', linestyle = '--')
    plt.show()
    plt.figure(num = 1)
    plt.plot(need_data_x_5G, data_5G_TX1)
    plt.title(picture_title2, fontsize=12, color='red')
    plt.xlabel('Frequency(Hz)')
    plt.ylabel('Power(dBm)')
    plt.xticks(need_data_x_5G, rotation = 90 )
    plt.yticks([12,13,14,15,16,17,18])
    plt.axhline(14, c = 'red', linestyle = '--')
    plt.axhline(16, c = 'red', linestyle = '--')
    plt.show()

def action():
    log = entry.get().strip()
    match_log_path = r'C:\Users\jxie\Desktop\plottool\match_MCS7_TX1.txt'
    (data_2G_chain1, data_5G_chain1) = plot_MCS7_platness(log, match_log_path)
    picture_title1 = 'MCS7_flatness_2G'
    picture_title2 = 'MCS7_flatness_5G' 
    plot_function(data_2G_chain1, data_5G_chain1, picture_title1, picture_title2)
    
def actiontwo():
    log = entry.get().strip()
    match_log_path = r'C:\Users\jxie\Desktop\plottool\match_MCS7_TX2.txt'
    (data_2G_chain2, data_5G_chain2) = plot_MCS7_platness(log, match_log_path)
    picture_title1 = 'MCS7_flatness_2G'
    picture_title2 = 'MCS7_flatness_5G'
    plot_function(data_2G_chain2, data_5G_chain2, picture_title1, picture_title2)
    
    
root = Tk() #实例化类
root.geometry('250x100+700+200') #定C:\Users\jxie\Desktop\plottool\match_MCS7_TX1.txt义宽和高度，+表现向下和向右移动
#root.resizable(False, False)  #不准拉高拉宽
root.title('Plotting tool') #设置名称
Label(root, text = '输入log路径', font = ('黑体',15)).grid() #label设置标签， grid（网格布局）
entry = Entry(root) #Entry增加输入框
entry.grid(row = 0, column = 1) # grid()网格布局.
button = Button(root, text = 'Flatness_MCS7_TX1', width = '14', command = action)#增加按钮,command单击来绑定函数，注意函数不需要加()
button.grid(row = 1, column = 0)#布局网格
buttonTwo = Button(root, text = 'Flatness_MCS7_TX2', width = '14',command = actiontwo)#增加按钮
buttonTwo.grid(row = 1, column = 1)#布局网格
root.mainloop() #循环弹窗
